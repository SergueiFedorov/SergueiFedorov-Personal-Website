#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PersonalWebsite.DB
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="LocalDatabase")]
	public partial class DatabaseContextDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertNew(New instance);
    partial void UpdateNew(New instance);
    partial void DeleteNew(New instance);
    partial void InsertPortfolio(Portfolio instance);
    partial void UpdatePortfolio(Portfolio instance);
    partial void DeletePortfolio(Portfolio instance);
    partial void InsertPortfolioLink(PortfolioLink instance);
    partial void UpdatePortfolioLink(PortfolioLink instance);
    partial void DeletePortfolioLink(PortfolioLink instance);
    partial void InsertLinkLogo(LinkLogo instance);
    partial void UpdateLinkLogo(LinkLogo instance);
    partial void DeleteLinkLogo(LinkLogo instance);
    #endregion
		
		public DatabaseContextDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["SQLAzureConnection"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseContextDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseContextDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseContextDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseContextDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<New> News
		{
			get
			{
				return this.GetTable<New>();
			}
		}
		
		public System.Data.Linq.Table<Portfolio> Portfolios
		{
			get
			{
				return this.GetTable<Portfolio>();
			}
		}
		
		public System.Data.Linq.Table<PortfolioLink> PortfolioLinks
		{
			get
			{
				return this.GetTable<PortfolioLink>();
			}
		}
		
		public System.Data.Linq.Table<LinkLogo> LinkLogos
		{
			get
			{
				return this.GetTable<LinkLogo>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.News")]
	public partial class New : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Title;
		
		private string _Text;
		
		private System.DateTime _PostedDate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnPostedDateChanging(System.DateTime value);
    partial void OnPostedDateChanged();
    #endregion
		
		public New()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostedDate", DbType="DateTime NOT NULL")]
		public System.DateTime PostedDate
		{
			get
			{
				return this._PostedDate;
			}
			set
			{
				if ((this._PostedDate != value))
				{
					this.OnPostedDateChanging(value);
					this.SendPropertyChanging();
					this._PostedDate = value;
					this.SendPropertyChanged("PostedDate");
					this.OnPostedDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Portfolio")]
	public partial class Portfolio : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Title;
		
		private string _Text;
		
		private string _GitHubLink;
		
		private string _ImageLink;
		
		private string _FacebookLink;
		
		private string _WebsiteLink;
		
		private EntitySet<PortfolioLink> _PortfolioLinks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnGitHubLinkChanging(string value);
    partial void OnGitHubLinkChanged();
    partial void OnImageLinkChanging(string value);
    partial void OnImageLinkChanged();
    partial void OnFacebookLinkChanging(string value);
    partial void OnFacebookLinkChanged();
    partial void OnWebsiteLinkChanging(string value);
    partial void OnWebsiteLinkChanged();
    #endregion
		
		public Portfolio()
		{
			this._PortfolioLinks = new EntitySet<PortfolioLink>(new Action<PortfolioLink>(this.attach_PortfolioLinks), new Action<PortfolioLink>(this.detach_PortfolioLinks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="VarChar(50)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Text", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GitHubLink", DbType="VarChar(200)")]
		public string GitHubLink
		{
			get
			{
				return this._GitHubLink;
			}
			set
			{
				if ((this._GitHubLink != value))
				{
					this.OnGitHubLinkChanging(value);
					this.SendPropertyChanging();
					this._GitHubLink = value;
					this.SendPropertyChanged("GitHubLink");
					this.OnGitHubLinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageLink", DbType="VarChar(200)")]
		public string ImageLink
		{
			get
			{
				return this._ImageLink;
			}
			set
			{
				if ((this._ImageLink != value))
				{
					this.OnImageLinkChanging(value);
					this.SendPropertyChanging();
					this._ImageLink = value;
					this.SendPropertyChanged("ImageLink");
					this.OnImageLinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FacebookLink", DbType="VarChar(200)")]
		public string FacebookLink
		{
			get
			{
				return this._FacebookLink;
			}
			set
			{
				if ((this._FacebookLink != value))
				{
					this.OnFacebookLinkChanging(value);
					this.SendPropertyChanging();
					this._FacebookLink = value;
					this.SendPropertyChanged("FacebookLink");
					this.OnFacebookLinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WebsiteLink", DbType="VarChar(200)")]
		public string WebsiteLink
		{
			get
			{
				return this._WebsiteLink;
			}
			set
			{
				if ((this._WebsiteLink != value))
				{
					this.OnWebsiteLinkChanging(value);
					this.SendPropertyChanging();
					this._WebsiteLink = value;
					this.SendPropertyChanged("WebsiteLink");
					this.OnWebsiteLinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Portfolio_PortfolioLink", Storage="_PortfolioLinks", ThisKey="Id", OtherKey="PortfolioItemID")]
		public EntitySet<PortfolioLink> PortfolioLinks
		{
			get
			{
				return this._PortfolioLinks;
			}
			set
			{
				this._PortfolioLinks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PortfolioLinks(PortfolioLink entity)
		{
			this.SendPropertyChanging();
			entity.Portfolio = this;
		}
		
		private void detach_PortfolioLinks(PortfolioLink entity)
		{
			this.SendPropertyChanging();
			entity.Portfolio = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PortfolioLinks")]
	public partial class PortfolioLink : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _LinkLogo;
		
		private string _LinkURL;
		
		private int _PortfolioItemID;
		
		private EntitySet<LinkLogo> _LinkLogos;
		
		private EntityRef<Portfolio> _Portfolio;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnLinkLogoChanging(string value);
    partial void OnLinkLogoChanged();
    partial void OnLinkURLChanging(string value);
    partial void OnLinkURLChanged();
    partial void OnPortfolioItemIDChanging(int value);
    partial void OnPortfolioItemIDChanged();
    #endregion
		
		public PortfolioLink()
		{
			this._LinkLogos = new EntitySet<LinkLogo>(new Action<LinkLogo>(this.attach_LinkLogos), new Action<LinkLogo>(this.detach_LinkLogos));
			this._Portfolio = default(EntityRef<Portfolio>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LinkLogo", DbType="Char(5) NOT NULL", CanBeNull=false)]
		public string LinkLogo
		{
			get
			{
				return this._LinkLogo;
			}
			set
			{
				if ((this._LinkLogo != value))
				{
					this.OnLinkLogoChanging(value);
					this.SendPropertyChanging();
					this._LinkLogo = value;
					this.SendPropertyChanged("LinkLogo");
					this.OnLinkLogoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LinkURL", DbType="VarChar(300) NOT NULL", CanBeNull=false)]
		public string LinkURL
		{
			get
			{
				return this._LinkURL;
			}
			set
			{
				if ((this._LinkURL != value))
				{
					this.OnLinkURLChanging(value);
					this.SendPropertyChanging();
					this._LinkURL = value;
					this.SendPropertyChanged("LinkURL");
					this.OnLinkURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PortfolioItemID", DbType="Int NOT NULL")]
		public int PortfolioItemID
		{
			get
			{
				return this._PortfolioItemID;
			}
			set
			{
				if ((this._PortfolioItemID != value))
				{
					if (this._Portfolio.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPortfolioItemIDChanging(value);
					this.SendPropertyChanging();
					this._PortfolioItemID = value;
					this.SendPropertyChanged("PortfolioItemID");
					this.OnPortfolioItemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PortfolioLink_LinkLogo", Storage="_LinkLogos", ThisKey="LinkLogo", OtherKey="LinkLogoCode")]
		public EntitySet<LinkLogo> LinkLogos
		{
			get
			{
				return this._LinkLogos;
			}
			set
			{
				this._LinkLogos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Portfolio_PortfolioLink", Storage="_Portfolio", ThisKey="PortfolioItemID", OtherKey="Id", IsForeignKey=true)]
		public Portfolio Portfolio
		{
			get
			{
				return this._Portfolio.Entity;
			}
			set
			{
				Portfolio previousValue = this._Portfolio.Entity;
				if (((previousValue != value) 
							|| (this._Portfolio.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Portfolio.Entity = null;
						previousValue.PortfolioLinks.Remove(this);
					}
					this._Portfolio.Entity = value;
					if ((value != null))
					{
						value.PortfolioLinks.Add(this);
						this._PortfolioItemID = value.Id;
					}
					else
					{
						this._PortfolioItemID = default(int);
					}
					this.SendPropertyChanged("Portfolio");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LinkLogos(LinkLogo entity)
		{
			this.SendPropertyChanging();
			entity.PortfolioLink = this;
		}
		
		private void detach_LinkLogos(LinkLogo entity)
		{
			this.SendPropertyChanging();
			entity.PortfolioLink = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LinkLogos")]
	public partial class LinkLogo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _LinkLogoCode;
		
		private string _LogoURL;
		
		private EntityRef<PortfolioLink> _PortfolioLink;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnLinkLogoCodeChanging(string value);
    partial void OnLinkLogoCodeChanged();
    partial void OnLogoURLChanging(string value);
    partial void OnLogoURLChanged();
    #endregion
		
		public LinkLogo()
		{
			this._PortfolioLink = default(EntityRef<PortfolioLink>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LinkLogoCode", DbType="Char(5) NOT NULL", CanBeNull=false)]
		public string LinkLogoCode
		{
			get
			{
				return this._LinkLogoCode;
			}
			set
			{
				if ((this._LinkLogoCode != value))
				{
					if (this._PortfolioLink.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLinkLogoCodeChanging(value);
					this.SendPropertyChanging();
					this._LinkLogoCode = value;
					this.SendPropertyChanged("LinkLogoCode");
					this.OnLinkLogoCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogoURL", DbType="VarChar(300) NOT NULL", CanBeNull=false)]
		public string LogoURL
		{
			get
			{
				return this._LogoURL;
			}
			set
			{
				if ((this._LogoURL != value))
				{
					this.OnLogoURLChanging(value);
					this.SendPropertyChanging();
					this._LogoURL = value;
					this.SendPropertyChanged("LogoURL");
					this.OnLogoURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PortfolioLink_LinkLogo", Storage="_PortfolioLink", ThisKey="LinkLogoCode", OtherKey="LinkLogo", IsForeignKey=true)]
		public PortfolioLink PortfolioLink
		{
			get
			{
				return this._PortfolioLink.Entity;
			}
			set
			{
				PortfolioLink previousValue = this._PortfolioLink.Entity;
				if (((previousValue != value) 
							|| (this._PortfolioLink.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PortfolioLink.Entity = null;
						previousValue.LinkLogos.Remove(this);
					}
					this._PortfolioLink.Entity = value;
					if ((value != null))
					{
						value.LinkLogos.Add(this);
						this._LinkLogoCode = value.LinkLogo;
					}
					else
					{
						this._LinkLogoCode = default(string);
					}
					this.SendPropertyChanged("PortfolioLink");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
